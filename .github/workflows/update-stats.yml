name: Update GitHub Stats

on:
  schedule:
    # 매일 한국시간 오전 9시 (UTC 00:00)에 실행
    - cron: '0 0 * * *'
  workflow_dispatch: # 수동 실행 가능
  push:
    branches: [ main ]

jobs:
  update-stats:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests
    
    - name: Create update script
      run: |
        cat > update_stats.py << 'EOF'
        import os
        import json
        import requests
        from datetime import datetime
        
        def get_github_stats(username, token):
            headers = {'Authorization': f'token {token}'}
            
            # 전체 커밋 수 (공개 레포)
            commits_url = f'https://api.github.com/search/commits?q=author:{username}'
            commits_resp = requests.get(commits_url, headers=headers)
            total_commits = commits_resp.json().get('total_count', 0) if commits_resp.status_code == 200 else 0
            
            # PR 수
            pr_url = f'https://api.github.com/search/issues?q=author:{username}+type:pr'
            pr_resp = requests.get(pr_url, headers=headers)
            total_prs = pr_resp.json().get('total_count', 0) if pr_resp.status_code == 200 else 0
            
            # Issue 수
            issue_url = f'https://api.github.com/search/issues?q=author:{username}+type:issue'
            issue_resp = requests.get(issue_url, headers=headers)
            total_issues = issue_resp.json().get('total_count', 0) if issue_resp.status_code == 200 else 0
            
            # Star 수 (모든 레포)
            total_stars = 0
            page = 1
            while page <= 3:  # 최대 3페이지
                repos_url = f'https://api.github.com/users/{username}/repos?per_page=100&page={page}'
                repos_resp = requests.get(repos_url, headers=headers)
                if repos_resp.status_code != 200:
                    break
                repos = repos_resp.json()
                if not repos:
                    break
                for repo in repos:
                    total_stars += repo.get('stargazers_count', 0)
                page += 1
            
            # 기여한 레포 수
            contributed = 6  # 기본값, 실제로는 더 복잡한 계산 필요
            
            return {
                'stars': total_stars,
                'commits': total_commits,
                'prs': total_prs,
                'issues': total_issues,
                'contributed': contributed
            }
        
        def update_gist(gist_id, content, token):
            url = f'https://api.github.com/gists/{gist_id}'
            headers = {'Authorization': f'token {token}'}
            
            # 먼저 기존 gist의 파일명 가져오기
            get_resp = requests.get(url, headers=headers)
            if get_resp.status_code != 200:
                return False
            
            gist_data = get_resp.json()
            filename = list(gist_data['files'].keys())[0]
            
            # 업데이트
            data = {
                'files': {
                    filename: {
                        'content': content
                    }
                }
            }
            
            response = requests.patch(url, headers=headers, json=data)
            return response.status_code == 200
        
        def main():
            username = 'dugadak'
            token = os.environ.get('GH_TOKEN')
            
            if not token:
                print("Error: GH_TOKEN not found")
                return 1
            
            print(f"Fetching stats for {username}...")
            stats = get_github_stats(username, token)
            
            # Stats Gist 업데이트
            stats_content = f"""⭐    Total Stars:                            {stats['stars']:>5}
➕    Total Commits:                          {stats['commits']:>5}
🔀    Total PRs:                              {stats['prs']:>5}
🚩    Total Issues:                           {stats['issues']:>5}
📦    Contributed to:                         {stats['contributed']:>5}"""
            
            print("Updating stats gist...")
            if update_gist('6c0bbb105e1e069e12e4bcca7660ab47', stats_content, token):
                print("✅ Stats updated!")
            else:
                print("❌ Failed to update stats")
            
            print(f"\nUpdated stats:\n{stats_content}")
            return 0
        
        if __name__ == '__main__':
            exit(main())
        EOF
    
    - name: Update GitHub Stats
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: python update_stats.py
    
    - name: Job Summary
      run: |
        echo "## 📊 GitHub Stats Updated!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Stats Gist has been updated with latest data" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check your profile: [github.com/dugadak](https://github.com/dugadak)" >> $GITHUB_STEP_SUMMARY